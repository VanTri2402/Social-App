// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships : One-to-Many
  posts      Post[]
  comments   Comment[]
  likes      Like[]

  followers  Follows[] @relation("following") // users who follow this user
  following  Follows[] @relation("follower")  // users this user follows

  notifications        Notification[] @relation("userNotifications")       // notifications received by a user
  notificationsCreated Notification[] @relation("notificationsCreator")    // notifications triggered by a user
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  author        User        @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  post        Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([postId, authorId]) // composite index
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId]) // prevent same user liking twice
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followingId, followerId])
  @@id([followerId, followingId]) // composite PK
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean  @default(false)
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  // Relationships
  user    User    @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User    @relation("notificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
}

// // library models
// model Reader {
//   id String @id @default(cuid())
//   nane String
//   browwedDay DateTime?
//   returnDay DateTime?
//   createAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   books Book[] 
// }
// model Category {
//   id String  @id @default(cuid())
//   category String @unique

//   books BookCategory[] @relation("CategoryToBook")
// }


// model Book {
//   id String @id @default(cuid())
//   title String @unique
//   author String 

//   readerId String
//   reader Reader @relation(fields: [readerId] , references: [id])

//   category BookCategory[] @relation("BookToCategory")
// }

// model BookCategory {
//   id String @id @default(cuid())
//   bookId String
//   categoryId String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   book Book @relation("BookToCategory", fields: [bookId] , references: [id], onDelete: Cascade)
//   category Category @relation("CategoryToBook", fields: [categoryId], references: [id], onDelete: Cascade)
//   @@index([bookId, categoryId])
//   @@unique([bookId, categoryId]) // prevent same book-category association twice
// }
